apply plugin: 'com.android.application'
apply plugin: 'scala.android'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.github.dsvdsv.fp.sample"
        minSdkVersion 27
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.with{
        additionalParameters = [
                '-Ymacro-annotations',

                "-deprecation", // Emit warning and location for usages of deprecated APIs.
                "-explaintypes", // Explain type errors in more detail.
                "-feature", // Emit warning and location for usages of features that should be imported explicitly.
                "-language:postfixOps",
                "-language:existentials", // Existential types (besides wildcard types) can be written and inferred
                "-language:experimental.macros", // Allow macro definition (besides implementation and application)
                "-language:higherKinds", // Allow higher-kinded types
                "-language:implicitConversions", // Allow definition of implicit functions called views
                "-unchecked", // Enable additional warnings where generated code depends on assumptions.
                "-Xcheckinit", // Wrap field accessors to throw an exception on uninitialized access.
                "-Xfatal-warnings", // Fail the compilation if there are any warnings.
                "-Xlint:adapted-args", // Warn if an argument list is modified to match the receiver.
                "-Xlint:constant", // Evaluation of a constant arithmetic expression results in an error.
                "-Xlint:delayedinit-select", // Selecting member of DelayedInit.
                "-Xlint:doc-detached", // A Scaladoc comment appears to be detached from its element.
                "-Xlint:inaccessible", // Warn about inaccessible types in method signatures.
                "-Xlint:infer-any", // Warn when a type argument is inferred to be `Any`.
                "-Xlint:missing-interpolator", // A string literal appears to be missing an interpolator id.
                "-Xlint:nullary-unit", // Warn when nullary methods return Unit.
                "-Xlint:option-implicit", // Option.apply used implicit view.
                "-Xlint:package-object-classes", // Class or object defined in package object.
                "-Xlint:poly-implicit-overload", // Parameterized overloaded implicit methods are not visible as view bounds.
                "-Xlint:private-shadow", // A private field (or class parameter) shadows a superclass field.
                "-Xlint:stars-align", // Pattern sequence wildcard must align with sequence component.
                "-Xlint:type-parameter-shadow", // A local type parameter shadows a type already in scope.
//                "-Ywarn-dead-code", // Warn when dead code is identified.
                "-Ywarn-extra-implicit", // Warn when more than one implicit parameter section is defined.
                "-Ywarn-numeric-widen", // Warn when numerics are widened.
                "-Ywarn-unused:implicits", // Warn if an implicit parameter is unused.
                "-Ywarn-unused:imports", // Warn if an import selector is not referenced.
                "-Ywarn-unused:locals", // Warn if a local definition is unused.
//                "-Ywarn-unused:params", // Warn if a value parameter is unused.
                "-Ywarn-unused:patvars", // Warn if a variable bound in a pattern is unused.
                "-Ywarn-unused:privates", // Warn if a private member is unused.
                "-Ywarn-value-discard", // Warn when non-Unit expression results are unused.
                "-Ybackend-parallelism", "8", // Enable paralellisation â€” change to desired number!
                "-Ycache-plugin-class-loader:last-modified", // Enables caching of classloaders for compiler plugins
                "-Ycache-macro-class-loader:last-modified" // and macro definitions. This can lead to performance improvements.
        ]
    }
}

dependencies {

    compileOnly fileTree(dir: "$buildDir", include: ["**/debug/R.jar"])

    implementation "org.scala-lang:scala-library:$scalaVersion"

    implementation "org.typelevel:cats-core_2.13:$catsVersion"
    implementation "org.typelevel:cats-effect_2.13:$catsEffectVersion"
    implementation "org.typelevel:cats-mtl_2.13:$catsMtlVersion"
    implementation "org.typelevel:cats-tagless-core_2.13:$catsTaglessVersion"
    implementation "org.typelevel:cats-tagless-macros_2.13:$catsTaglessVersion"

    implementation "org.http4s:http4s-okhttp-client_2.13:$http4sVersion"
    implementation "org.http4s:http4s-scala-xml_2.13:$http4sVersion"

    scalaCompilerPlugins "org.typelevel:kind-projector_2.13.3:$kindProjectorVersion"

    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.google.android.material:material:1.2.1'

    testImplementation 'junit:junit:4.12'
    testImplementation "org.scalameta:munit_2.13:$munitVersion"
    testImplementation "org.typelevel:munit-cats-effect-2_2.13:$munitCatsEffectVersion"

    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

}